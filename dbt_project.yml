
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'customer_analytics'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'customer-analytics-db'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
source-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
data-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
    - "target"
    - "dbt_modules"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:

  customer_analytics:

    base:
      # The following does not have to be segmented, but I did it
      # for the sake of practicing "organization" in my tutorial.
      customers:
        schema: customers
        materialized: view
        tags: ["customer_info", "base"]

      website:
        schema: website
        materialized: view
        tags: ["website_info", "base"]
      other:
        schema: misc
        materialized: view
        tags: ["misc_info", "base"]
    stage:
        schema: stage
        materialized: view
    models:
      fct:
        schema: models
        materialized: table
      dim:
        schema: models
        materialized: table